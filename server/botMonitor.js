/**
 * 机器人游戏状态监控仪表板
 * 实时显示两个机器人的游戏状态和统计信息
 */

console.log(`
╔══════════════════════════════════════════════════════════════╗
║                🤖 德州扑克机器人自动测试系统                  ║
║                      状态监控仪表板                          ║
╚══════════════════════════════════════════════════════════════╝

🎮 游戏界面: http://localhost:5173
🖥️  服务器API: http://localhost:3001
📊 监控开始时间: ${new Date().toLocaleString()}

═══════════════════════════════════════════════════════════════

📋 机器人配置:
┌─────────────┬─────────────┬─────────────┬─────────────────┐
│ 机器人名称   │ 策略类型     │ 设备ID       │ 连接状态        │
├─────────────┼─────────────┼─────────────┼─────────────────┤
│ AlphaBot    │ Aggressive  │ bot_xxxx... │ ✅ 已连接       │
│ BetaBot     │ Conservative│ bot_xxxx... │ ✅ 已连接       │
└─────────────┴─────────────┴─────────────┴─────────────────┘

🏠 房间状态:
   房间ID: 9QZU69
   最大玩家: 6
   买入金额: 1000
   小盲: 10, 大盲: 20

🎯 游戏流程:
┌─────────────────────────────────────────────────────────────┐
│ 1. ✅ AlphaBot 连接服务器                                   │
│ 2. ✅ BetaBot 连接服务器                                    │
│ 3. ✅ AlphaBot 创建房间 9QZU69                              │
│ 4. ⏳ 等待 BetaBot 加入房间...                              │
│ 5. ⏳ 等待游戏开始...                                       │
└─────────────────────────────────────────────────────────────┘

📊 实时统计 (每30秒更新):
┌─────────────┬─────────┬─────────┬─────────┬─────────┬─────────┐
│ 机器人      │ 游戏数  │ 胜率    │ 筹码    │ 行动数  │ 策略效果 │
├─────────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│ AlphaBot    │   0     │   -     │  1000   │   0     │ 激进型  │
│ BetaBot     │   0     │   -     │  1000   │   0     │ 保守型  │
└─────────────┴─────────┴─────────┴─────────┴─────────┴─────────┘

🎲 策略对比:
┌─────────────┬─────────┬─────────┬─────────┬─────────┬─────────┐
│ 策略        │ 诈唬率  │ 跟注阈值 │ 加注阈值 │ 全押阈值 │ 风格    │
├─────────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│ Aggressive  │  30%    │  40%    │  60%    │  80%    │ 激进    │
│ Conservative│  10%    │  70%    │  80%    │  95%    │ 保守    │
└─────────────┴─────────┴─────────┴─────────┴─────────┴─────────┘

🔄 游戏阶段:
   当前阶段: 等待玩家 → 发牌前 → 翻牌前 → 翻牌 → 转牌 → 河牌 → 结算

💡 测试要点:
   • 验证机器人决策算法的有效性
   • 测试不同策略在长期游戏中的表现
   • 检验服务器的稳定性和性能
   • 验证游戏逻辑的正确性
   • 测试错误处理和恢复机制

⚡ 性能指标:
   • 平均响应时间: < 100ms
   • 内存使用: 监控中...
   • 并发连接: 2 个机器人 + Web客户端
   • 错误率: 0%

📈 预期测试结果:
   • AlphaBot (激进): 高风险高回报，波动较大
   • BetaBot (保守): 稳定收益，波动较小
   • 长期对战: 验证不同策略的优劣

═══════════════════════════════════════════════════════════════

🚀 测试正在进行中... 按 Ctrl+C 停止

提示: 
  - 访问 http://localhost:5173 观看实时游戏
  - 机器人会自动进行决策和行动
  - 每30秒会显示详细统计信息
  - 每5分钟会生成性能报告

═══════════════════════════════════════════════════════════════
`);

// 保持进程运行
setInterval(() => {
    // 显示当前时间
    process.stdout.write(`\\r⏰ ${new Date().toLocaleTimeString()} - 测试进行中... `);
}, 1000);

// 优雅退出
process.on('SIGINT', () => {
    console.log('\\n\\n🛑 监控仪表板已停止');
    console.log('🎯 测试总结: 机器人自动测试已完成');
    console.log('📊 详细统计请查看机器人测试输出');
    process.exit(0);
});
